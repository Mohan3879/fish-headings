// Generated by LiveScript 1.4.0
(function(){
  var $, jquery, projectName, util, ref$, log, warn, config, our, toString$ = {}.toString;
  $ = jquery = require('./lib/jquery');
  projectName = 'fish-headings';
  ref$ = util = require('./util'), log = ref$.log, warn = ref$.warn;
  module.exports = {
    init: init,
    collapse: collapse,
    expand: expand
  };
  config = {
    'class': {
      headingEnabled: 'enabled',
      headingDisabled: 'disabled',
      containerCollapsed: 'collapsed'
    }
  };
  our = {
    items: [],
    $main: void 8,
    opts: {},
    tops: [],
    lefts: [],
    numItems: -1,
    selected: -1,
    $container: void 8,
    containerWidth: -1,
    expandedHeight: -1,
    collapsedHeightInner: -1,
    collapsedHeight: -1,
    longestWidth: -1,
    flushLeft: void 8,
    paddingTop: -1,
    paddingBottom: -1
  };
  function init($_container, vals, opts){
    opts == null && (opts = {});
    our.$container = $_container;
    initMain(vals, opts);
    calculate();
    inject();
    absolutise();
    log('winning');
    return $(window).on('resize', function(){
      log('resizing');
      our.$container.empty();
      calculate();
      inject();
      if (our.selected !== -1) {
        return collapse(our.selected);
      }
    });
  }
  function collapse(n){
    var j;
    our.selected = n;
    our.$container.addClass(config['class'].containerCollapsed);
    our.items.forEach(function($v, i){
      $v.removeClass(config['class'].headingDisabled).removeClass(config['class'].headingEnabled);
      if (i === n) {
        return $v.addClass(config['class'].headingEnabled);
      } else {
        return $v.addClass(config['class'].headingDisabled);
      }
    });
    j = -1;
    our.items.forEach(function($v, i){
      var top, spanHeightSmall;
      if (i === n) {
        $v.css('left', 0);
        top = divide(our.collapsedHeightInner, 2) - our.spanHeightLarge / 2;
        log('topping enabled', top);
        return $v.css('top', top);
      } else {
        j++;
        if (our.flushLeft) {
          $v.css('left', our.longestWidth + 15);
        } else {
          $v.css('left', '');
        }
        spanHeightSmall = 10;
        top = function(){
          var height, delta;
          height = subtract(our.collapsedHeightInner, spanHeightSmall);
          delta = divide(height, our.numItems - 2);
          return multiply(delta, j);
        }();
        log('topping disabled', top);
        return $v.css('top', top);
      }
    });
    log('1min-height', our.collapsedHeight);
    return our.$container.css('min-height', our.collapsedHeight);
  }
  function expand(){
    our.$container.removeClass(config['class'].containerCollapsed);
    return restore();
  }
  function initMain(vals, _opts){
    var ref$, x$, $main;
    _opts == null && (_opts = {});
    our.numItems = vals.length;
    our.opts = _opts;
    our.flushLeft = (ref$ = _opts.flushLeft) != null ? ref$ : false;
    x$ = $main = $('<div>');
    x$.attr('id', projectName);
    vals.forEach(function(v, i){
      var text, href, listIconClass, x$, $item, $spanIcon, y$, $spanContents, z$, $spanText, z1$;
      if (toString$.call(v).slice(8, -1) === 'Object') {
        text = v.text, href = v.href, listIconClass = v.listIconClass;
        listIconClass == null && (listIconClass = []);
      } else {
        text = v;
        listIconClass = [];
      }
      x$ = $item = $('<div>');
      x$.attr('id', i);
      $spanIcon = $('<span>');
      listIconClass.forEach(function(it){
        return $spanIcon.addClass(it);
      });
      if (href) {
        y$ = $spanContents = $('<a>');
        y$.attr('href', href);
        y$.html(text);
        z$ = $spanText = $('<span>');
        z$.append($spanContents);
      } else {
        z1$ = $spanText = $('<span>');
        z1$.html(text);
      }
      $main.append($item);
      $item.append($spanIcon);
      $item.append($spanText);
      return our.items.push($item);
    });
    return our.$main = $main;
  }
  function calculate(){
    var ref$;
    our.paddingTop = makeAbsolute((ref$ = our.opts.paddingTop) != null ? ref$ : 0, 'vertical');
    our.paddingBottom = makeAbsolute((ref$ = our.opts.paddingBottom) != null ? ref$ : 0, 'vertical');
    our.$container.css('padding-top', our.paddingTop).css('padding-bottom', our.paddingBottom);
    return our.collapsedHeightInner = makeAbsolute(our.opts.collapsedHeightInner, 'vertical');
  }
  function inject(){
    our.$container.append(our.$main);
    our.expandedHeight = our.$container.outerHeight();
    log('expanded-height', our.expandedHeight);
    return our.collapsedHeight = add(our.collapsedHeightInner, our.paddingTop, our.paddingBottom);
  }
  function absolutise(){
    var tops, lefts;
    tops = [];
    lefts = [];
    our.items.forEach(function($v, i){
      var offset, span, $span, width;
      offset = $v.position();
      tops.push(offset.top);
      lefts.push(offset.left);
      span = $v.find('span')[1];
      $span = $(span);
      width = $span.width();
      our.longestWidth = Math.max(width, our.longestWidth);
      if (i === 0) {
        return our.spanHeightLarge = $span.height();
      }
    });
    our.items.forEach(function($v, i){
      var top, left;
      top = tops[i];
      left = lefts[i];
      return $v.css('position', 'absolute').css('top', top).css('left', left);
    });
    log('2min-height', our.expandedHeight);
    our.$container.css('min-height', our.expandedHeight);
    our.tops = tops;
    return our.lefts = lefts;
  }
  function restore(){
    our.items.forEach(function($v, i){
      var top, left;
      top = our.tops[i];
      left = our.lefts[i];
      return $v.css('top', top).css('left', left).removeClass(config['class'].headingDisabled).addClass(config['class'].headingEnabled);
    });
    log('3min-height', our.expandedHeight);
    return our.$container.css('min-height', our.expandedHeight);
  }
  function op(theOp, values){
    var percentMode, result, reduce, k, j, i$, len$, i;
    percentMode = false;
    result = void 8;
    reduce = function(a, b){
      if (theOp === 'add') {
        return a + b;
      }
      if (theOp === 'subtract') {
        return a - b;
      }
      if (theOp === 'multiply') {
        return a * b;
      }
      if (theOp === 'divide') {
        return a / b;
      }
    };
    k = -1;
    j = '';
    for (i$ = 0, len$ = values.length; i$ < len$; ++i$) {
      i = values[i$];
      k++;
      i += '';
      j = i;
      log('before', i);
      i = i.replace(/%$/, '');
      log('after', i);
      if (i !== j) {
        percentMode = true;
      }
      if (k === 0) {
        result = +i;
      } else {
        result = reduce(result, +i);
      }
    }
    if (percentMode) {
      result += '%';
    }
    return result;
  }
  function add(){
    return op('add', (function(args$){
      var i$, x$, len$, results$ = [];
      for (i$ = 0, len$ = args$.length; i$ < len$; ++i$) {
        x$ = args$[i$];
        results$.push(x$);
      }
      return results$;
    }(arguments)));
  }
  function subtract(){
    return op('subtract', (function(args$){
      var i$, x$, len$, results$ = [];
      for (i$ = 0, len$ = args$.length; i$ < len$; ++i$) {
        x$ = args$[i$];
        results$.push(x$);
      }
      return results$;
    }(arguments)));
  }
  function divide(){
    return op('divide', (function(args$){
      var i$, x$, len$, results$ = [];
      for (i$ = 0, len$ = args$.length; i$ < len$; ++i$) {
        x$ = args$[i$];
        results$.push(x$);
      }
      return results$;
    }(arguments)));
  }
  function multiply(){
    return op('multiply', (function(args$){
      var i$, x$, len$, results$ = [];
      for (i$ = 0, len$ = args$.length; i$ < len$; ++i$) {
        x$ = args$[i$];
        results$.push(x$);
      }
      return results$;
    }(arguments)));
  }
  function makeAbsolute(val, direction){
    var m, $theReference, theReferenceVal;
    m = /^(.+)%$/.exec(val);
    if (!m) {
      log('make-absolute:', val);
    }
    if (!m) {
      return val;
    }
    $theReference = $(window);
    theReferenceVal = direction === 'horizontal'
      ? $theReference.width()
      : $theReference.height();
    log('make-absolute:', m[1] / 100 * theReferenceVal);
    return m[1] * theReferenceVal / 100;
  }
}).call(this);
